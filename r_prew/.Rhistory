pearson.test(input_table$temperature)
cvm.test(input_table$temperature)
#test H1 theory
grubbs.test(input_table$temperature)
grubbs.test(input_table$temperature, opposite = TRUE)
rosh_test <- rosnerTest(input_table$temperature,k = 3)
rosh_test
boxplot(input_table$temperature, col = "azure2")
#scatter plot
ggplot(data = input_table, aes(x=year, y=temperature)) +
geom_point(size=3) +
geom_smooth(method = "lm", se = FALSE)
temp_cor_coef = cor(input_table$year, input_table$temperature)
cor.test(input_table$year, input_table$temperature)
#Student coef
wt = temp_cor_coef * sqrt(length(input_table$temperature))/sqrt(1 - temp_cor_coef^2)
adf.test(input_table$temperature, alternative = "stationary")
reg_input <- input_table <- read.table(file = paste0(getwd(),"/input2.txt"), header = TRUE, sep = " ")
regression <- lm(temperature ~ year, reg_input)
summary(regression)
#drift
temperatyreArray <- input_table[,"temperature"]
print(temperatyreArray);
drift <- function(h) {
startArray = temperatyreArray[(h+1):length(temperatyreArray)];
endArray =  temperatyreArray[1:(length(temperatyreArray) - h)];
return(mean((startArray - endArray)))
}
args <- rep(0,27);
values <- rep(0,27)
print(values);
for(arg in 0:26){
args[(arg+1)] = arg;
values[(arg + 1)] = drift(arg);
}
driftTable = data.table::data.table(lag = args, drift = values)
ggplot(data = driftTable, aes(x = lag, y=drift)) + geom_line(size = 1.4, color="black");
#stationary test
adf.test(input_table$temperature)
#cov_function
cov_fn <- function(h) {
var = (sum(temperatyreArray)/ length(temperatyreArray));
n = (length(temperatyreArray) - h);
r = 0;
for(s in 1:n){
r = r + (temperatyreArray[(s+h)] - var) * (temperatyreArray[s] - var) / n
}
return(r);
}
cov_values <- rep(0,27);
for(arg in 0:26){
cov_values[(arg+1)] = cov_fn(arg)
}
covariatTable = data.table::data.table(lag = args, covVal = cov_values);
ggplot(data = covariatTable, aes(x = lag, y=covVal), ylab("covariance")) +
geom_line(size = 1.4, color="black")
#semivariogram
semivariogram_fn <- function(h) {
n = (length(temperatyreArray) - h);
r = 0;
for(s in 1:n){
r = r + (((temperatyreArray[(s+h)]) - (temperatyreArray[s]))^2)
}
r = r/(n*2)
return(r);
}
sem_values <- rep(0,27)
for(arg in 0:26) {
sem_values[arg+1] = semivariogram_fn(arg);
}
semivariogramTable = data.table::data.table(lag = args, semValue = sem_values);
ggplot(data = semivariogramTable, aes(x = lag, y=semValue)) +
geom_line(size = 1.4, color="black")
library("ggplot2")
library("ggpubr")
library("nortest")
library("outliers")
library("EnvStats")
library("moments")
library("tseries")
input_table <- read.table(file = paste0(getwd(),"/input.txt"), header = TRUE, sep = " ")
ggplot(data=input_table,aes(x=year,y=temperature)) +
geom_line(size=1) +
geom_point(size=3)
temp_mean <- mean(input_table$temperature)
temp_median <- median(input_table$temperature)
temp_dispersion <- var(input_table$temperature)
temp_standart_deviation <- sd(input_table$temperature)
temp_min_value <- min(input_table$temperature)
temp_max_value <- max(input_table$temperature)
temp_standart_mean_error <- sd(input_table$temperature)/sqrt(length(input_table$temperature))
temp_quantiles <- quantile(input_table$temperature)
temp_first_quntiles <- temp_quantiles[2]
temp_last_quantil <- temp_quantiles[4]
temp_interquantil_range <- IQR(input_table$temperature)
temp_variation_coef = (temp_standart_deviation / temp_mean[1]) * 100
temperatyre_assymetric_coef = skewness(input_table$temperature)
temperatyre_ecesss = (kurtosis(input_table$temperature) - 3)
#histogram + norm
ggplot(data = input_table, aes(x=temperature)) +
geom_histogram(aes(y = ..density..),binwidth = 1.4, fill = "azure2", color = "black") +
stat_function(fun = dnorm, geom="line",
args = list(mean = mean(input_table$temperature, na.rm = TRUE),
sd = sd(input_table$temperature, na.rm = TRUE)),
colour = 'red', size = 1.4)
#density + norm
ggplot(data = input_table, aes(x=temperature)) +
geom_density( size = 1.2, color = "red") +
stat_function(fun = dnorm, geom="line", linetype=2,
args = list(mean = mean(input_table$temperature, na.rm = TRUE),
sd = sd(input_table$temperature, na.rm = TRUE)),
colour = 'black', size = 1.4)
ggplot(data = input_table, aes(x=temperature)) +
geom_density( size = 1.2, color = "red") +
stat_function(fun = dnorm, geom="line", linetype=2,
args = list(mean = mean(input_table$temperature, na.rm = TRUE),
sd = sd(input_table$temperature, na.rm = TRUE)),
colour = 'black', size = 1.4)
temp_third_order_moment = 0
for(temp in input_table$temperature)
temp_third_order_moment = temp_third_order_moment + ((temp - temp_mean)^3)
temp_third_order_moment = temp_third_order_moment / length(input_table$temperature)
temp_asymmetry = (temp_third_order_moment / (temp_standart_deviation ^3))
temp_four_order_moment = 0
for(temp in input_table$temperature)
temp_four_order_moment = temp_four_order_moment + ((temp - temp_mean)^4)
temp_four_order_moment = temp_four_order_moment / length(input_table$temperature)
temp_excess = (temp_four_order_moment / (temp_standart_deviation ^ 4)) - 3
#qq-plot
ggqqplot(input_table$temperature, ggtheme=theme_bw())
#test H0 theory
shapiro.test(input_table$temperature)
pearson.test(input_table$temperature)
cvm.test(input_table$temperature)
#test H1 theory
grubbs.test(input_table$temperature)
grubbs.test(input_table$temperature, opposite = TRUE)
rosh_test <- rosnerTest(input_table$temperature,k = 3)
rosh_test
boxplot(input_table$temperature, col = "azure2")
#scatter plot
ggplot(data = input_table, aes(x=year, y=temperature)) +
geom_point(size=3) +
geom_smooth(method = "lm", se = FALSE)
temp_cor_coef = cor(input_table$year, input_table$temperature)
cor.test(input_table$year, input_table$temperature)
#Student coef
wt = temp_cor_coef * sqrt(length(input_table$temperature))/sqrt(1 - temp_cor_coef^2)
adf.test(input_table$temperature, alternative = "stationary")
reg_input <- input_table <- read.table(file = paste0(getwd(),"/input2.txt"), header = TRUE, sep = " ")
regression <- lm(temperature ~ year, reg_input)
summary(regression)
#drift
temperatyreArray <- input_table[,"temperature"]
print(temperatyreArray);
drift <- function(h) {
startArray = temperatyreArray[(h+1):length(temperatyreArray)];
endArray =  temperatyreArray[1:(length(temperatyreArray) - h)];
return(mean((startArray - endArray)))
}
args <- rep(0,27);
values <- rep(0,27)
print(values);
for(arg in 0:26){
args[(arg+1)] = arg;
values[(arg + 1)] = drift(arg);
}
driftTable = data.table::data.table(lag = args, drift = values)
ggplot(data = driftTable, aes(x = lag, y=drift)) + geom_line(size = 1.4, color="black");
#stationary test
adf.test(input_table$temperature)
#cov_function
cov_fn <- function(h) {
var = (sum(temperatyreArray)/ length(temperatyreArray));
n = (length(temperatyreArray) - h);
r = 0;
for(s in 1:n){
r = r + (temperatyreArray[(s+h)] - var) * (temperatyreArray[s] - var) / n
}
return(r);
}
cov_values <- rep(0,27);
for(arg in 0:26){
cov_values[(arg+1)] = cov_fn(arg)
}
covariatTable = data.table::data.table(lag = args, covVal = cov_values);
ggplot(data = covariatTable, aes(x = lag, y=covVal), ylab("covariance")) +
geom_line(size = 1.4, color="black")
#semivariogram
semivariogram_fn <- function(h) {
n = (length(temperatyreArray) - h);
r = 0;
for(s in 1:n){
r = r + (((temperatyreArray[(s+h)]) - (temperatyreArray[s]))^2)
}
r = r/(n*2)
return(r);
}
sem_values <- rep(0,27)
for(arg in 0:26) {
sem_values[arg+1] = semivariogram_fn(arg);
}
semivariogramTable = data.table::data.table(lag = args, semivariogram = sem_values);
ggplot(data = semivariogramTable, aes(x = lag, y=semivariogram)) +
geom_line(size = 1.4, color="black")
#libs
library("ggplot2")
library("ggpubr")
library("nortest")
library("outliers")
library("EnvStats")
library("moments")
library("tseries")
input_table <- read.table(file = paste0(getwd(),"/input.txt"), header = TRUE, sep = " ")
#input data plot
ggplot(data=input_table,aes(x=year,y=temperature)) +
geom_line(size=1) +
geom_point(size=3)
#descriptive statistics
temp_mean <- mean(input_table$temperature)
temp_median <- median(input_table$temperature)
temp_dispersion <- var(input_table$temperature)
temp_standart_deviation <- sd(input_table$temperature)
temp_min_value <- min(input_table$temperature)
temp_max_value <- max(input_table$temperature)
temp_standart_mean_error <- sd(input_table$temperature)/sqrt(length(input_table$temperature))
temp_quantiles <- quantile(input_table$temperature)
temp_first_quntiles <- temp_quantiles[2]
temp_last_quantil <- temp_quantiles[4]
temp_interquantil_range <- IQR(input_table$temperature)
temp_variation_coef = (temp_standart_deviation / temp_mean[1]) * 100
temperatyre_assymetric_coef = skewness(input_table$temperature)
temperatyre_ecesss = (kurtosis(input_table$temperature) - 3)
#histogram + norm
ggplot(data = input_table, aes(x=temperature)) +
geom_histogram(aes(y = ..density..),binwidth = 1.4, fill = "azure2", color = "black") +
stat_function(fun = dnorm, geom="line",
args = list(mean = mean(input_table$temperature, na.rm = TRUE),
sd = sd(input_table$temperature, na.rm = TRUE)),
colour = 'red', size = 1.4)
#density + norm
ggplot(data = input_table, aes(x=temperature)) +
geom_density( size = 1.2, color = "red") +
stat_function(fun = dnorm, geom="line", linetype=2,
args = list(mean = mean(input_table$temperature, na.rm = TRUE),
sd = sd(input_table$temperature, na.rm = TRUE)),
colour = 'black', size = 1.4)
ggplot(data = input_table, aes(x=temperature)) +
geom_density( size = 1.2, color = "red") +
stat_function(fun = dnorm, geom="line", linetype=2,
args = list(mean = mean(input_table$temperature, na.rm = TRUE),
sd = sd(input_table$temperature, na.rm = TRUE)),
colour = 'black', size = 1.4)
#test H0 theory
shapiro.test(input_table$temperature)
pearson.test(input_table$temperature)
cvm.test(input_table$temperature)
#test H1 theory
grubbs.test(input_table$temperature)
grubbs.test(input_table$temperature, opposite = TRUE)
rosh_test <- rosnerTest(input_table$temperature,k = 3)
rosh_test
boxplot(input_table$temperature, col = "azure2")
#scatter plot
ggplot(data = input_table, aes(x=year, y=temperature)) +
geom_point(size=3) +
geom_smooth(method = "lm", se = FALSE)
temp_cor_coef = cor(input_table$year, input_table$temperature)
cor.test(input_table$year, input_table$temperature)
#libs
library("ggplot2")
library("ggpubr")
library("nortest")
library("outliers")
library("EnvStats")
library("moments")
library("tseries")
input_table <- read.table(file = paste0(getwd(),"/input.txt"), header = TRUE, sep = " ")
input_table <- read.table(file = paste0(getwd(),"/input.txt"), header = TRUE, sep = " ")
#libs
library("ggplot2")
library("ggpubr")
library("nortest")
library("outliers")
library("EnvStats")
library("moments")
library("tseries")
input_table <- read.table(file = paste0(getwd(),"/input.txt"), header = TRUE, sep = " ")
#input data plot
ggplot(data=input_table,aes(x=year,y=temperature)) +
geom_line(size=1) +
geom_point(size=3)
#descriptive statistics
temp_mean <- mean(input_table$temperature)
temp_median <- median(input_table$temperature)
temp_dispersion <- var(input_table$temperature)
temp_standart_deviation <- sd(input_table$temperature)
temp_min_value <- min(input_table$temperature)
temp_max_value <- max(input_table$temperature)
temp_standart_mean_error <- sd(input_table$temperature)/sqrt(length(input_table$temperature))
temp_quantiles <- quantile(input_table$temperature)
temp_first_quntiles <- temp_quantiles[2]
temp_last_quantil <- temp_quantiles[4]
temp_interquantil_range <- IQR(input_table$temperature)
temp_variation_coef = (temp_standart_deviation / temp_mean[1]) * 100
temperatyre_assymetric_coef = skewness(input_table$temperature)
temperatyre_ecesss = (kurtosis(input_table$temperature) - 3)
#histogram + norm
ggplot(data = input_table, aes(x=temperature)) +
geom_histogram(aes(y = ..density..),binwidth = 1.4, fill = "azure2", color = "black") +
stat_function(fun = dnorm, geom="line",
args = list(mean = mean(input_table$temperature, na.rm = TRUE),
sd = sd(input_table$temperature, na.rm = TRUE)),
colour = 'red', size = 1.4)
#density + norm
ggplot(data = input_table, aes(x=temperature)) +
geom_density( size = 1.2, color = "red") +
stat_function(fun = dnorm, geom="line", linetype=2,
args = list(mean = mean(input_table$temperature, na.rm = TRUE),
sd = sd(input_table$temperature, na.rm = TRUE)),
colour = 'black', size = 1.4)
temp_third_order_moment = 0
for(temp in input_table$temperature)
temp_third_order_moment = temp_third_order_moment + ((temp - temp_mean)^3)
temp_third_order_moment = temp_third_order_moment / length(input_table$temperature)
temp_asymmetry = (temp_third_order_moment / (temp_standart_deviation ^3))
temp_four_order_moment = 0
for(temp in input_table$temperature)
temp_four_order_moment = temp_four_order_moment + ((temp - temp_mean)^4)
temp_four_order_moment = temp_four_order_moment / length(input_table$temperature)
temp_excess = (temp_four_order_moment / (temp_standart_deviation ^ 4)) - 3
#qq-plot
ggqqplot(input_table$temperature, ggtheme=theme_bw())
#тест на нормальность
shapiro.test(input_table$temperature)
pearson.test(input_table$temperature)
cvm.test(input_table$temperature)
#тесты на наличие выбросов
grubbs.test(input_table$temperature)
grubbs.test(input_table$temperature, opposite = TRUE)
rosh_test <- rosnerTest(input_table$temperature,k = 3)
rosh_test
#ящик с усами
boxplot(input_table$temperature, col = "azure2")
#исходные данные + линейный тренд
ggplot(data = input_table, aes(x=year, y=temperature)) +
geom_point(size=3) +
geom_smooth(method = "lm", se = FALSE)
View(input_table)
input_table <- read.table(file = paste0(getwd(),"/input.txt"), header = TRUE, sep = " ")
input_table <- read.table(file = paste0(getwd(),"/input.txt"), header = TRUE, sep = " ")
input_table <- read.table(file = paste0(getwd(),"/input.txt"), header = TRUE, sep = " ")
input_table <- read.table(file = paste0(getwd(),"/input.txt"), header = TRUE, sep = " ")
View(input_table)
View(input_table)
input_table <- read.table(file = paste0(getwd(),"/input.txt"), header = TRUE, sep = " ")
#input data plot
ggplot(data=input_table,aes(x=year,y=temperature)) +
geom_line(size=1) +
geom_point(size=3)
#libs
library("ggplot2")
library("ggpubr")
library("nortest")
library("outliers")
library("EnvStats")
library("moments")
library("tseries")
input_table <- read.table(file = paste0(getwd(),"/input.txt"), header = TRUE, sep = " ")
#input data plot
ggplot(data=input_table,aes(x=year,y=temperature)) +
geom_line(size=1) +
geom_point(size=3)
#descriptive statistics
temp_mean <- mean(input_table$temperature)
temp_median <- median(input_table$temperature)
temp_dispersion <- var(input_table$temperature)
temp_standart_deviation <- sd(input_table$temperature)
temp_min_value <- min(input_table$temperature)
temp_max_value <- max(input_table$temperature)
temp_standart_mean_error <- sd(input_table$temperature)/sqrt(length(input_table$temperature))
temp_quantiles <- quantile(input_table$temperature)
temp_first_quntiles <- temp_quantiles[2]
temp_last_quantil <- temp_quantiles[4]
temp_interquantil_range <- IQR(input_table$temperature)
temp_variation_coef = (temp_standart_deviation / temp_mean[1]) * 100
temperatyre_assymetric_coef = skewness(input_table$temperature)
temperatyre_ecesss = (kurtosis(input_table$temperature) - 3)
#histogram + norm
ggplot(data = input_table, aes(x=temperature)) +
geom_histogram(aes(y = ..density..),binwidth = 1.4, fill = "azure2", color = "black") +
stat_function(fun = dnorm, geom="line",
args = list(mean = mean(input_table$temperature, na.rm = TRUE),
sd = sd(input_table$temperature, na.rm = TRUE)),
colour = 'red', size = 1.4)
#density + norm
ggplot(data = input_table, aes(x=temperature)) +
geom_density( size = 1.2, color = "red") +
stat_function(fun = dnorm, geom="line", linetype=2,
args = list(mean = mean(input_table$temperature, na.rm = TRUE),
sd = sd(input_table$temperature, na.rm = TRUE)),
colour = 'black', size = 1.4)
temp_third_order_moment = 0
for(temp in input_table$temperature)
temp_third_order_moment = temp_third_order_moment + ((temp - temp_mean)^3)
temp_third_order_moment = temp_third_order_moment / length(input_table$temperature)
temp_asymmetry = (temp_third_order_moment / (temp_standart_deviation ^3))
temp_four_order_moment = 0
for(temp in input_table$temperature)
temp_four_order_moment = temp_four_order_moment + ((temp - temp_mean)^4)
temp_four_order_moment = temp_four_order_moment / length(input_table$temperature)
temp_excess = (temp_four_order_moment / (temp_standart_deviation ^ 4)) - 3
#qq-plot
ggqqplot(input_table$temperature, ggtheme=theme_bw())
#тест на нормальность
shapiro.test(input_table$temperature)
pearson.test(input_table$temperature)
cvm.test(input_table$temperature)
#тесты на наличие выбросов
grubbs.test(input_table$temperature)
grubbs.test(input_table$temperature, opposite = TRUE)
rosh_test <- rosnerTest(input_table$temperature,k = 3)
rosh_test
#ящик с усами
boxplot(input_table$temperature, col = "azure2")
#исходные данные + линейный тренд
ggplot(data = input_table, aes(x=year, y=temperature)) +
geom_point(size=3) +
geom_smooth(method = "lm", se = FALSE)
#libs
library("ggplot2")
library("ggpubr")
library("nortest")
library("outliers")
library("EnvStats")
library("moments")
library("tseries")
input_table <- read.table(file = paste0(getwd(),"/input.txt"), header = TRUE, sep = " ")
#input data plot
ggplot(data=input_table,aes(x=year,y=temperature)) +
geom_line(size=1) +
geom_point(size=3)
#descriptive statistics
temp_mean <- mean(input_table$temperature)
temp_median <- median(input_table$temperature)
temp_dispersion <- var(input_table$temperature)
temp_standart_deviation <- sd(input_table$temperature)
temp_min_value <- min(input_table$temperature)
temp_max_value <- max(input_table$temperature)
temp_standart_mean_error <- sd(input_table$temperature)/sqrt(length(input_table$temperature))
temp_quantiles <- quantile(input_table$temperature)
temp_first_quntiles <- temp_quantiles[2]
temp_last_quantil <- temp_quantiles[4]
temp_interquantil_range <- IQR(input_table$temperature)
temp_variation_coef = (temp_standart_deviation / temp_mean[1]) * 100
temperatyre_assymetric_coef = skewness(input_table$temperature)
temperatyre_ecesss = (kurtosis(input_table$temperature) - 3)
#histogram + norm
ggplot(data = input_table, aes(x=temperature)) +
geom_histogram(aes(y = ..density..),binwidth = 1.4, fill = "azure2", color = "black") +
stat_function(fun = dnorm, geom="line",
args = list(mean = mean(input_table$temperature, na.rm = TRUE),
sd = sd(input_table$temperature, na.rm = TRUE)),
colour = 'red', size = 1.4)
#density + norm
ggplot(data = input_table, aes(x=temperature)) +
geom_density( size = 1.2, color = "red") +
stat_function(fun = dnorm, geom="line", linetype=2,
args = list(mean = mean(input_table$temperature, na.rm = TRUE),
sd = sd(input_table$temperature, na.rm = TRUE)),
colour = 'black', size = 1.4)
temp_third_order_moment = 0
for(temp in input_table$temperature)
temp_third_order_moment = temp_third_order_moment + ((temp - temp_mean)^3)
temp_third_order_moment = temp_third_order_moment / length(input_table$temperature)
temp_asymmetry = (temp_third_order_moment / (temp_standart_deviation ^3))
temp_four_order_moment = 0
for(temp in input_table$temperature)
temp_four_order_moment = temp_four_order_moment + ((temp - temp_mean)^4)
temp_four_order_moment = temp_four_order_moment / length(input_table$temperature)
temp_excess = (temp_four_order_moment / (temp_standart_deviation ^ 4)) - 3
#qq-plot
ggqqplot(input_table$temperature, ggtheme=theme_bw())
#тест на нормальность
shapiro.test(input_table$temperature)
pearson.test(input_table$temperature)
cvm.test(input_table$temperature)
#тесты на наличие выбросов
grubbs.test(input_table$temperature)
grubbs.test(input_table$temperature, opposite = TRUE)
rosh_test <- rosnerTest(input_table$temperature,k = 3)
rosh_test
#ящик с усами
boxplot(input_table$temperature, col = "azure2")
#исходные данные + линейный тренд
ggplot(data = input_table, aes(x=year, y=temperature)) +
geom_point(size=3) +
geom_smooth(method = "lm", se = FALSE)
#Student coef
wt = temp_cor_coef * sqrt(length(input_table$temperature))/sqrt(1 - temp_cor_coef^2)
#коэфициент корреляции + значимость коэффициента корреляции
temp_cor_coef = cor(input_table$year, input_table$temperature)
cor.test(input_table$year, input_table$temperature)
#Student coef
wt = temp_cor_coef * sqrt(length(input_table$temperature))/sqrt(1 - temp_cor_coef^2)
adf.test(input_table$temperature, alternative = "stationary")
test_arr = 0:(input_table$temperature-1)
test_arr <- 0:(input_table$temperature-1)
test_arr <- 0:(input_table$temperature-1)
print(test_arr)
test_arr <- 0:45
print(test_arr)
